[{"D:\\mwork\\github\\react-case\\src\\index.js":"1","D:\\mwork\\github\\react-case\\src\\reportWebVitals.js":"2","D:\\mwork\\github\\react-case\\src\\App.js":"3","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example1.js":"4","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example2.js":"5","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example3.js":"6","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example4.js":"7","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example5.js":"8","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example6.js":"9","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example7.js":"10","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\index.js":"11","D:\\mwork\\github\\react-case\\src\\components\\router-demo\\index.js":"12"},{"size":500,"mtime":1611545147069,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1611545147069,"results":"15","hashOfConfig":"14"},{"size":729,"mtime":1611639735685,"results":"16","hashOfConfig":"14"},{"size":1788,"mtime":1611565303467,"results":"17","hashOfConfig":"14"},{"size":2516,"mtime":1611565298147,"results":"18","hashOfConfig":"14"},{"size":649,"mtime":1611567367621,"results":"19","hashOfConfig":"14"},{"size":1892,"mtime":1611565264699,"results":"20","hashOfConfig":"14"},{"size":1022,"mtime":1611566803776,"results":"21","hashOfConfig":"14"},{"size":604,"mtime":1611566190195,"results":"22","hashOfConfig":"14"},{"size":1002,"mtime":1611638733159,"results":"23","hashOfConfig":"14"},{"size":1805,"mtime":1611640170590,"results":"24","hashOfConfig":"14"},{"size":585,"mtime":1611640303885,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1llzjxv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\mwork\\github\\react-case\\src\\index.js",[],["54","55"],"D:\\mwork\\github\\react-case\\src\\reportWebVitals.js",[],"D:\\mwork\\github\\react-case\\src\\App.js",[],"D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example1.js",["56","57","58","59","60"],"import React, { Component } from 'react'\r\nimport { useState } from 'react'\r\n/*\r\n\r\n    useState\r\n    \r\n    useState 是react自带的一个hook函数，它的作用是用来声明状态变量。\r\n\r\n*/\r\n// 类\r\nclass Example extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>你点击{this.state.count}次</p>\r\n                <button onClick={this.addCount}>点我</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    addCount = () => {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        })\r\n    }\r\n\r\n}\r\n\r\n// hooks\r\nfunction _Example() {\r\n    const [count, setCount] = useState(0)\r\n    return (\r\n        <div>\r\n            <p>你点击{count}次</p>\r\n            <button onClick={() => setCount(count + 1)}>点我</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n// hooks 多状态声明\r\nfunction __Example() {\r\n    const [age, setAge] = useState(18)\r\n    const [sex, setSex] = useState('男')\r\n    const [work, setWork] = useState('前端工程师')\r\n    const [likes, setLikes] = useState(['苹果', '香蕉'])\r\n\r\n\r\n    const addLikes = () => {\r\n        let _likes = JSON.parse(JSON.stringify(likes))\r\n        _likes.push('猕猴桃' + Date.now())\r\n        setLikes(_likes)\r\n        console.log(likes)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>age:{age}</p>\r\n            <p>sex:{sex}</p>\r\n            <p>work:{work}</p>\r\n            <p>likes:</p>\r\n            <ul>\r\n                {\r\n                    likes.map((item, i) => <li key={i}>{item}</li>)\r\n                }\r\n\r\n            </ul>\r\n            <button onClick={addLikes}>add likes</button>\r\n        </div>\r\n    )\r\n}\r\nexport default __Example","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example2.js",["61"],"import React, { Component } from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\"\r\n/*\r\n    useEffect\r\n\r\n\r\n    useEffect的第二个参数，它是一个数组，数组中可以写入很多状态对应的变量，\r\n    意思是当状态值发生变化时，我们才进行解绑。但是当传空数组[]时，就是当组件将被销毁时才进行解绑，\r\n    这也就实现了componentWillUnmount的生命周期函数。\r\n*/\r\n// 类\r\nclass Example extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(`挂载, 初始为:${this.state.count}`)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(`更新, 更新为：${this.state.count}`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>你点击{this.state.count}次</p>\r\n                <button onClick={this.addCount}>点我</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    addCount = () => {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        })\r\n    }\r\n}\r\n\r\nfunction Index() {\r\n    useEffect(() => {\r\n        console.log(`useEffect ... 进入Index页`)\r\n        // 返回一个函数进行解绑\r\n        return () => {\r\n            console.log(`离开 Index `)\r\n        }\r\n    },[])\r\n    return <h2>首页</h2>\r\n}\r\n\r\nfunction List() {\r\n    useEffect(() => {\r\n        console.log(`useEffect ... 进入List页`)\r\n        // 返回一个函数进行解绑\r\n        return () => {\r\n            console.log(`离开 List `)\r\n        }\r\n    },[])\r\n    return <h2>列表页</h2>\r\n}\r\n\r\n\r\n\r\nfunction _Example() {\r\n    const [count, setCount] = useState(0)\r\n\r\n    useEffect(() => {\r\n        console.log(`挂载：初始为：${count}`)\r\n        return()=>{\r\n            console.log(`解绑：更新为：${count}`)\r\n        }\r\n    },[count])\r\n\r\n    return (\r\n        <div>\r\n            <p>你点击{count}次</p>\r\n            <button onClick={() => { setCount(count + 1) }}>点我</button>\r\n            <Router>\r\n                <ul>\r\n                    <li ><Link to=\"/\">首页</Link></li>\r\n                    <li ><Link to=\"/list\">列表页</Link></li>\r\n                </ul>\r\n                <Route path=\"/\" exact component={Index}></Route>\r\n                <Route path=\"/list\" exact component={List}></Route>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default _Example","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example3.js",[],"D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example4.js",["62"],"import { useReducer, createContext, useContext } from 'react'\r\n\r\n/*\r\n\r\n    useReducer\r\n*/\r\n\r\n// useReducer 初体验\r\nfunction Example() {\r\n    const [count, dispatch] = useReducer((state, action) => {\r\n        switch (action) {\r\n            case 'add':\r\n                return state + 1\r\n            case 'sub':\r\n                return state - 1\r\n            default:\r\n                return state\r\n        }\r\n    }, 0)\r\n\r\n    return (\r\n        <div>\r\n            <h2>现在的分数是{count}</h2>\r\n            <button onClick={() => dispatch('add')}>加</button>\r\n            <button onClick={() => dispatch('sub')}>减</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n// 小案例 \r\n\r\n// 共享的color.js\r\nconst ColorContext = createContext()\r\nconst UPDATE_COLOR = \"update-color\"\r\n\r\nconst _reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_COLOR:\r\n            return action.color\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst Color = props => {\r\n    const [color, dispatch] = useReducer(_reducer, 'pink')\r\n    return (\r\n        <ColorContext.Provider value={{ color, dispatch }}>\r\n            {props.children}\r\n        </ColorContext.Provider>\r\n    )\r\n}\r\n\r\nfunction ShowArea() {\r\n    const { color } = useContext(ColorContext)\r\n    return (<div style={{ color: color }}>字体颜色为{color}</div>)\r\n}\r\n\r\nfunction Buttons() {\r\n    const { dispatch } = useContext(ColorContext)\r\n    return (\r\n        <div>\r\n            <button onClick={() => { dispatch({ type: 'update-color', color: 'pink' }) }}>pink</button>\r\n            <button onClick={() => { dispatch({ type: 'update-color', color: 'blue' }) }}>blue</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction _Example() {\r\n    return (\r\n        <div>\r\n            <Color>\r\n                <ShowArea />\r\n                <Buttons />\r\n            </Color>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default _Example","D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example5.js",[],"D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example6.js",[],"D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\Example7.js",["63"],"D:\\mwork\\github\\react-case\\src\\components\\hooks-demo\\index.js",[],"D:\\mwork\\github\\react-case\\src\\components\\router-demo\\index.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":11,"column":7,"nodeType":"70","messageId":"71","endLine":11,"endColumn":14},{"ruleId":"68","severity":1,"message":"72","line":37,"column":10,"nodeType":"70","messageId":"71","endLine":37,"endColumn":18},{"ruleId":"68","severity":1,"message":"73","line":49,"column":17,"nodeType":"70","messageId":"71","endLine":49,"endColumn":23},{"ruleId":"68","severity":1,"message":"74","line":50,"column":17,"nodeType":"70","messageId":"71","endLine":50,"endColumn":23},{"ruleId":"68","severity":1,"message":"75","line":51,"column":18,"nodeType":"70","messageId":"71","endLine":51,"endColumn":25},{"ruleId":"68","severity":1,"message":"69","line":13,"column":7,"nodeType":"70","messageId":"71","endLine":13,"endColumn":14},{"ruleId":"68","severity":1,"message":"69","line":9,"column":10,"nodeType":"70","messageId":"71","endLine":9,"endColumn":17},{"ruleId":"76","severity":1,"message":"77","line":27,"column":8,"nodeType":"78","endLine":27,"endColumn":10,"suggestions":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Example' is defined but never used.","Identifier","unusedVar","'_Example' is defined but never used.","'setAge' is assigned a value but never used.","'setSex' is assigned a value but never used.","'setWork' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onResize'. Either include it or remove the dependency array.","ArrayExpression",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [onResize]",{"range":"85","text":"86"},[704,706],"[onResize]"]